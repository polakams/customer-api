plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.hidetake.swagger.generator' version '2.19.2'
}

group = 'com.polakams'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

bootJar {
    enabled = true
}

jar {
    enabled = false
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.projectlombok:lombok:1.18.30'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Swagger Codegen
    swaggerCodegen 'org.openapitools:openapi-generator-cli:7.3.0'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.20'

    // Swagger Docs UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    // Database
    implementation 'com.h2database:h2'
}

processResources {
    dependsOn(generateSwaggerCode)
}

swaggerSources {
    customerService {
        inputFile = file("${rootDir}/src/main/resources/api/swagger-customer.yaml")
        code {
            language = 'spring'
            configFile = file("${rootDir}/src/main/resources/api/config.json")
            outputDir = file("${buildDir}/generated-sources/swagger")
            components = [models: true, apis: true, supportingFiles: 'ApiUtil.java']
            dependsOn validation
        }
    }
}

compileJava.dependsOn swaggerSources.customerService.code
sourceSets.main.java.srcDir "${swaggerSources.customerService.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.customerService.code.outputDir}/src/main/resources"

tasks.register('listGeneratedFiles') {
    description = 'Lists all files generated by Swagger Codegen'
    dependsOn generateSwaggerCode
    doLast {
        def outputDir = swaggerSources.customerService.code.outputDir
        println "Generated files in $outputDir:"
        fileTree(outputDir).each { file ->
            println file
        }
    }
}

build.finalizedBy listGeneratedFiles
